from numpy import polyfit
from numpy import poly1d
import numpy as np
#from numpy import 
import matplotlib.pyplot as plt
from mpmath import fourier, fourierval
import mpmath
from dolfin import cos, sin, pi
def csf_pressure():

	mmHg2Pa = 133.33
	polydegree = 15
	fourierdegree = 15

	time = [0.000000000000000000e+00, 1.540740699999999970e-02, 3.318518499999999899e-02, 
	        4.622222200000000031e-02, 6.755555600000000271e-02, 8.770370399999999345e-02, 
	        1.173333299999999996e-01, 1.374814799999999892e-01, 1.600000000000000033e-01, 
	        1.777777799999999964e-01, 1.979259299999999999e-01, 2.168888900000000008e-01, 
	        2.512592599999999843e-01, 2.939259300000000019e-01, 3.140740699999999830e-01, 
	        3.318518500000000038e-01, 3.389629599999999798e-01, 3.543703699999999901e-01, 
	        3.567407400000000006e-01, 3.733333300000000188e-01, 3.911111099999999841e-01, 
	        4.207407400000000020e-01, 4.574814799999999959e-01, 4.906666700000000270e-01, 
	        5.143703699999999657e-01, 5.487407399999999491e-01, 6.008888900000000088e-01, 
	        6.494814800000000554e-01, 7.300740700000000194e-01, 7.905185200000000023e-01, 
	        8.426666699999999510e-01, 8.995555600000000318e-01, 9.386666700000000363e-01, 
	        9.837036999999999587e-01, 1.035851899999999937e+00, 1.090370400000000073e+00, 
	        1.117629599999999890e+00, 1.160296299999999947e+00]



	p_CSF = [-2.787257200000000434e+00, -1.972503099999999954e+00, -5.175851000000001312e-01,
	          8.985351100000000812e-01,  2.110966799999999477e+00,  3.158507799999999310e+00,
	          3.837469499999999201e+00,  4.012059699999999118e+00,  4.070256399999999886e+00, 
	          3.876267399999999697e+00,  3.517387599999999281e+00,  3.187606199999999390e+00, 
	          2.712332899999999380e+00,  2.304955899999999502e+00,  1.790884800000000387e+00, 
	          1.189518719999999918e+00,  7.530433100000000213e-01,  4.814586120000000080e-01, 
	          3.844640800000000413e-01,  3.650651699999999944e-01,  5.590542400000000356e-01,
	          7.724422200000000682e-01,  9.373329300000001751e-01,  8.403383900000001017e-01, 
	          6.560487760000002222e-01,  2.195733699999999899e-01, -4.011916600000000610e-01, 
	         -7.891697999999998103e-01, -9.346615999999996482e-01, -1.060754500000000045e+00, 
	         -1.332339199999999613e+00, -1.468131599999999759e+00, -1.633022300000000149e+00, 
	         -1.817311899999999758e+00, -1.894907499999999745e+00, -2.156792800000000287e+00, 
	         -2.379880200000000556e+00, -2.525372000000000394e+00]

	p_CSF = [mmHg2Pa * p_CSF[i] for i in range(len(p_CSF))]

	z = polyfit(time, p_CSF, polydegree)
	p = poly1d(z)

	I = [time[0], time[-1]]
	f = lambda x: z[-1] + sum([z[-i-1]*x**(i) for i in range(1, len(z))])
	c,s = fourier(f, I, fourierdegree)
	c = [float(c[i]) for i in range(len(c))]
	s = [float(s[i]) for i in range(len(s))]
	I_length = float(I[-1] - I[0])
	p =lambda x: sum( [c[i]*cos(2*pi/I_length*i*x) + s[i]*sin(2*pi/I_length*i*x) for i in range(len(c))])
	
	#plt.figure()
	#plt.plot(np.linspace(time[0], time[-1], 100), [sum( [c[i]*cos(2*pi/I_length*i*x) + s[i]*sin(2*pi/I_length*i*x) for i in range(len(c))]) for x in np.linspace(time[0],time[-1],100)],linewidth=5)
	# plt.xlabel('time [s]')
	# plt.ylabel('P [Pa]')
	# plt.title('Intracranial pressure')
	# plt.grid(True)
	# png_folder = "../../png/"
	# plt.savefig(png_folder + "EidePressure.png")
	#plt.show()
	return I_length, c, s


if __name__ == "__main__":
    
    p = csf_pressure()
    # Run quick convergence test:
    # run_quick_convergence_test()

    # Store all errors
    #main()